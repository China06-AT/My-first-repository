from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from datetime import datetime, timedelta
import os, logging, sys, sqlite3
from pathlib import Path
from docx import Document
from docx.shared import Pt, Inches
from docx.enum.section import WD_SECTION_START
from docx.enum.text import WD_ALIGN_PARAGRAPH, WD_BREAK
from docx.enum.table import WD_ROW_HEIGHT, WD_CELL_VERTICAL_ALIGNMENT
from docx.oxml import parse_xml

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(PEOPLE_COUNT, FULLNAME, WORKPLACE, JOB_TITLE, POSITION,
 GROUP, CHECK_TYPE, CERT_DATE, NEXT_DATE, CONFIRM_DATA, CONFIRM_RESTART) = range(11)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã
POSITIONS = [
    '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞',
    '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
    '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
]

# –û–ø—Ü–∏–∏ –¥–ª—è –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
FIRE_SAFETY_OPTIONS = [
    '1. –î–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö',
    '2. –î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤'
]

# –í–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
start_variations = [
    '/start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–∑–∞–ø—É—Å–∫', '–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å', '–ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–µ–ª—É',
    '–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', '–Ω–∞—á–∏–Ω–∞–µ–º', '–≥–æ—Ç–æ–≤ –∫ –Ω–∞—á–∞–ª—É', '–ø–æ–µ—Ö–∞–ª–∏', '—Å—Ç–∞—Ä—Ç—É–µ–º',
    '–ø—Ä–∏—Å—Ç—É–ø–∞–µ–º', '–¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º', '–∑–∞–ø—É—Å—Ç–∏—Ç—å', '–≥–æ—Ç–æ–≤', '–Ω–∞—á–∏–Ω–∞—é',
    '–ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ', '–ø–µ—Ä–µ–π—Ç–∏ –∫ —Å—É—Ç–∏', '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å', '–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã',
    '–Ω–∞—á–Ω—ë–º', '–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º', '—Ö–æ—á—É –Ω–∞—á–∞—Ç—å', '–¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å',
    '–≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É', '—Å—Ç–∞—Ä—Ç—É–µ–º!', '–≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', '–¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É',
    '–≥–æ', '–¥–∞–≤–∞–π', '—Å–æ–∑–¥–∞—Ç—å', '–Ω–∞—á–∞–ª–æ', '—Å—Ç–∞—Ä—Ç!', '–ø–æ–µ—Ö–∞–ª–∏!', '–Ω–∞—á–∏–Ω–∞–µ–º!',
    '–°–¢–ê–†–¢', '–°–¢–ê–†–¢–£–ï–ú', '–°–¢–ê–†–¢–£–ô–¢–ï', '–°–¢–ê–†–¢–£–ô'
]

# –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
MESSAGES = {
    'start': "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:",
    'invalid_count': "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ",
    'enter_names': "üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è {} —á–µ–ª–æ–≤–µ–∫:\n(–í–≤–µ–¥–∏—Ç–µ –∫–∞–∂–¥–æ–µ –§–ò–û —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
    'invalid_names': "‚ùå –°–ª–µ–¥—É—é—â–∏–µ –§–ò–û –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ:\n{}\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ {} –§–ò–û –∑–∞–Ω–æ–≤–æ, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
    'enter_workplaces': "üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è {} —á–µ–ª–æ–≤–µ–∫:\n(–ö–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
    'enter_positions': "üíº –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è {} —á–µ–ª–æ–≤–µ–∫:\n(–ö–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
    'choose_course': "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {}:",
    'enter_date': "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):\n–ü—Ä–∏–º–µ—Ä: 01.02.2024",
    'invalid_date': "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥\n–ü—Ä–∏–º–µ—Ä: 01.02.2024",
    'future_date': "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:",
    'confirm_data': "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n{}\n–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?",
    'generating': "‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...",
    'success': "‚úÖ –ì–æ—Ç–æ–≤–æ! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ /start",
    'error': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start",
    'cancelled': "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
}

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫—É—Ä—Å–æ–≤
course_mapping = {
    '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏': '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞',
    '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞',
    '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –†–ö –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É —Ä–∞–±–æ—Ç –Ω–∞ –æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö'
}


class CertificateGenerator:
    def __init__(self):
        self.db = sqlite3.connect('certificates.db', check_same_thread=False, timeout=30)
        self.db.execute("PRAGMA journal_mode=WAL")
        self.create_tables()
        self.template_paths = {
            '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏': {
                'expert': Path('–≠–ª–±–µ–∑ Expert Solution.docx'),
                'regular': Path('–≠–ª–±–µ–∑ 2.docx')
            },
            '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞': Path('templates2.docx'),
            '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞': {
                '–î–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö': Path('–ü—Ç–º –æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π.docx'),
                '–î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤': Path('–ü—Ç–º —Ä–∞–±–æ—á–∏–µ.docx')
            },
            '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –†–ö –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É —Ä–∞–±–æ—Ç –Ω–∞ –æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö': Path(
                'templates3.docx')
        }
        self.output_dir = Path('generated_docs')
        self.output_dir.mkdir(exist_ok=True)

    def create_tables(self):
        self.db.execute('''CREATE TABLE IF NOT EXISTS certificates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            protocol_number TEXT,
            fullname TEXT,
            workplace TEXT,
            job_title TEXT,
            position TEXT,
            group_number TEXT,
            cert_date DATE,
            next_date DATE,
            template_type TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')
        self.db.commit()

    def generate_document(self, data):
        try:
            generated_files = []
            protocol_number = str(self.db.execute("SELECT COUNT(*) FROM certificates").fetchone()[0] + 1).zfill(3)

            if data['position'] == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                group = data['qualification_group']
                if isinstance(group, str):
                    group = int(group) if group.isdigit() else 0
                replacements = {
                    '{{ input_fullname }}': data['fullname'],
                    '{{ input_place }}': data['workplace'],
                    '{{ input_jobtitle }}': data['job_title'],
                    '{{ input_what }}': "–∏ –≤—ã—à–µ" if group in [4, 5] else "",
                    '{{ input_do }}': "–¥–æ " if group in [4, 5] else "",
                    '{{ input_nextdate }}': data['next_date'].strftime('%d.%m.%Y') if data['next_date'] else "",
                    '{{ input_proto }}': protocol_number,
                    '{{ input_date }}': data['cert_date'].strftime('%d.%m.%Y'),
                    '{{ input_group }}': str(group)
                }

                # –ü–µ—Ä–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç - Expert Solution
                doc1 = Document(self.template_paths['–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏']['expert'])
                self._replace_text_in_document(doc1, replacements)
                output_path1 = self._save_document(doc1, f"{data['fullname']}_Expert")
                generated_files.append(output_path1)

                # –í—Ç–æ—Ä–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç - –≠–ª–±–µ–∑ 2
                doc2 = Document(self.template_paths['–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏']['regular'])
                self._replace_text_in_document(doc2, replacements)
                output_path2 = self._save_document(doc2, f"{data['fullname']}_2")
                generated_files.append(output_path2)

            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫—É—Ä—Å–æ–≤
                if data['position'] == '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞':
                    template_path = self.template_paths[data['position']][data['template_type']]
                else:
                    template_path = self.template_paths[data['position']]

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫—É—Ä—Å–∞
                if data['position'] == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞':
                    replacements = {
                        '{{ input_data }}': data['cert_date'].strftime('%d.%m.%Y'),
                        '{{ input_fullname }}': data['fullname'],
                        '{{ input_place }}': data['workplace'],
                        '{{ input_job }}': data['job_title'],
                        '{{ input_check }}': data['qualification_group'],
                        '{{ input_proto }}': protocol_number
                    }
                elif data[
                    'position'] == '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –†–ö –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É —Ä–∞–±–æ—Ç –Ω–∞ –æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö':
                    replacements = {
                        '{{ input_date }}': data['cert_date'].strftime('%d.%m.%Y'),
                        '{{ input_name }}': data['fullname'],
                        '{{ input_place }}': data['workplace'],
                        '{{ input_job }}': data['job_title'],
                        '{{ input_proto }}': protocol_number
                    }
                else:  # –ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                    replacements = {
                        '{{ input_name }}': data['fullname'],
                        '{{ input_place }}': data['workplace'],
                        '{{ input_jobtitle }}': data['job_title'],
                        '{{ input_nextdate }}': data['next_date'].strftime('%d.%m.%Y') if data['next_date'] else "",
                        '{{ input_proto }}': protocol_number,
                        '{{ input_date }}': data['cert_date'].strftime('%d.%m.%Y')
                    }

                doc = Document(template_path)
                self._replace_text_in_document(doc, replacements)
                output_path = self._save_document(doc, data['fullname'])
                generated_files.append(output_path)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self._save_to_database(data, protocol_number)
            return True, generated_files

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
            return False, None

    def _replace_text_in_document(self, doc, replacements):
        # –ó–∞–º–µ–Ω–∞ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞—Ö
        for paragraph in doc.paragraphs:
            for key, value in replacements.items():
                if key in paragraph.text:
                    paragraph.text = paragraph.text.replace(key, str(value))

        # –ó–∞–º–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for key, value in replacements.items():
                        if key in cell.text:
                            cell.text = cell.text.replace(key, str(value))

    def _save_document(self, doc, fullname):
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        output_path = self.output_dir / f"{fullname}_{timestamp}.docx"
        doc.save(output_path)
        return output_path

    def _save_to_database(self, data, protocol_number):
        try:
            self.db.execute('''INSERT INTO certificates 
                (protocol_number, fullname, workplace, position, group_number, 
                 cert_date, next_date, template_type, job_title)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                            (protocol_number,
                             data['fullname'],
                             data['workplace'],
                             data['position'],
                             str(data['qualification_group']),
                             data['cert_date'],
                             data['next_date'],
                             data.get('template_type', ''),
                             data['job_title']))
            self.db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ë–î
            pass


async def handle_start_variations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.lower()

    if message_text in start_variations:
        context.user_data.clear()
        await update.message.reply_text(
            MESSAGES['start'],
            reply_markup=ReplyKeyboardRemove()
        )
        return PEOPLE_COUNT
    return ConversationHandler.END


async def get_people_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text.strip())
        if count <= 0:
            raise ValueError()

        context.user_data.clear()
        context.user_data.update({
            'total_people': count,
            'names': [],
            'workplaces': [],
            'job_titles': [],
            'positions': [],
            'groups': [],
            'cert_dates': [],
            'next_dates': [],
            'fire_safety_types': [],
            'check_types': []
        })

        if count == 1:
            await update.message.reply_text(
                "üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è 1 —á–µ–ª–æ–≤–µ–∫–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "–ò–≤–∞–Ω–æ–≤ –ê–Ω–¥—Ä–µ–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á"
            )
        else:
            await update.message.reply_text(
                MESSAGES['enter_names'].format(count) + "\n\n"
                                                        "–ü—Ä–∏–º–µ—Ä:\n" + "\n".join(
                    [f"–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á" for _ in range(min(count, 3))])
            )
        return FULLNAME

    except ValueError:
        await update.message.reply_text(MESSAGES['invalid_count'])
        return PEOPLE_COUNT


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    total_people = context.user_data['total_people']
    names = [name.strip() for name in text.split('\n') if name.strip()]

    if len(names) != total_people:
        if total_people == 1:
            await update.message.reply_text(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –§–ò–û –¥–ª—è 1 —á–µ–ª–æ–≤–µ–∫–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "–ò–≤–∞–Ω–æ–≤ –ê–Ω–¥—Ä–µ–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ {total_people} –§–ò–û\n"
                f"–í—ã –≤–≤–µ–ª–∏ {len(names)} –§–ò–û\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ {total_people} –§–ò–û, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n" + "\n".join([f"–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á" for _ in range(min(total_people, 3))])
            )
        return FULLNAME

    invalid_names = []
    for i, name in enumerate(names, 1):
        name_parts = name.split()
        if len(name_parts) < 2 or not all(part.replace('-', '').isalpha() for part in name_parts):
            invalid_names.append(f"{i}) {name}")

    if invalid_names:
        await update.message.reply_text(
            "‚ùå –°–ª–µ–¥—É—é—â–∏–µ –§–ò–û –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ:\n" +
            "\n".join(invalid_names) + "\n\n"
                                       "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –§–ò–û:\n"
                                       "- –ú–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞\n"
                                       "- –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å\n"
                                       "- –ö–∞–∂–¥–æ–µ –§–ò–û —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n\n"
                                       f"–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ {total_people} –§–ò–û –∑–∞–Ω–æ–≤–æ"
        )
        return FULLNAME

    context.user_data['names'] = names
    await update.message.reply_text(
        f"üè¢ –í–≤–µ–¥–∏—Ç–µ {'–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏' if total_people == 1 else '–Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è ' + str(total_people) + ' —á–µ–ª–æ–≤–µ–∫'}\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n" + "\n".join([f"–¢–û–û \"–ö–æ–º–ø–∞–Ω–∏—è {i + 1}\"" for i in range(min(total_people, 3))])
    )
    return WORKPLACE


async def get_workplace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    total_people = context.user_data['total_people']
    workplaces = [wp.strip() for wp in text.split('\n') if wp.strip()]

    if len(workplaces) != total_people:
        await update.message.reply_text(
            f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ {total_people} {'–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é' if total_people == 1 else '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'}\n"
            f"–í—ã –≤–≤–µ–ª–∏ {len(workplaces)} {'–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é' if len(workplaces) == 1 else '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ {total_people} {'–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é' if total_people == 1 else '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'}, "
            f"{'–∫–∞–∂–¥—É—é ' if total_people > 1 else ''}—Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n" + "\n".join([f"–¢–û–û \"–ö–æ–º–ø–∞–Ω–∏—è {i + 1}\"" for i in range(min(total_people, 3))])
        )
        return WORKPLACE

    context.user_data['workplaces'] = workplaces
    await update.message.reply_text(
        f"üëî –í–≤–µ–¥–∏—Ç–µ {'–¥–æ–ª–∂–Ω–æ—Å—Ç—å' if total_people == 1 else '–¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è ' + str(total_people) + ' —á–µ–ª–æ–≤–µ–∫'}:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n" + "\n".join(["–ò–Ω–∂–µ–Ω–µ—Ä-—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", "–≠–ª–µ–∫—Ç—Ä–∏–∫", "–ù–∞—á–∞–ª—å–Ω–∏–∫ —É—á–∞—Å—Ç–∫–∞"][:min(total_people, 3)])
    )
    return JOB_TITLE


async def get_job_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    total_people = context.user_data['total_people']
    job_titles = [job.strip() for job in text.split('\n') if job.strip()]

    if len(job_titles) != total_people:
        if total_people == 1:
            await update.message.reply_text(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "–ò–Ω–∂–µ–Ω–µ—Ä-—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ {total_people} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π\n"
                f"–í—ã –≤–≤–µ–ª–∏ {len(job_titles)} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ {total_people} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n" + "\n".join(["–ò–Ω–∂–µ–Ω–µ—Ä-—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", "–≠–ª–µ–∫—Ç—Ä–∏–∫", "–ù–∞—á–∞–ª—å–Ω–∏–∫ —É—á–∞—Å—Ç–∫–∞"][:min(total_people, 3)])
            )
        return JOB_TITLE

    context.user_data['job_titles'] = job_titles
    keyboard = [[pos] for pos in POSITIONS]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    await update.message.reply_text(
        f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {context.user_data['names'][len(context.user_data['positions'])]}:",
        reply_markup=reply_markup
    )
    return POSITION


async def get_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if 'positions' not in context.user_data:
        context.user_data['positions'] = []
    if 'names' not in context.user_data:
        return ConversationHandler.END

    current_index = len(context.user_data['positions'])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞
    if current_index >= len(context.user_data['names']):
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return ConversationHandler.END

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    if current_index == 0 or (current_index > 0 and context.user_data['positions'][-1] != text):
        selected_course = course_mapping.get(text, text)
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫—É—Ä—Å, —á—Ç–æ –∏ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        selected_course = context.user_data['positions'][-1]

    if selected_course == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
        context.user_data['positions'].append(selected_course)
        keyboard = [['2', '3', '4', '5']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–æ–ø—É—Å–∫–∞ –¥–ª—è {context.user_data['names'][current_index]}:",
            reply_markup=reply_markup
        )
        return GROUP

    elif selected_course == '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞':
        context.user_data['positions'].append(selected_course)
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–µ–ª–æ–≤–µ–∫ –≤—ã–±–∏—Ä–∞–ª —ç—Ç–æ—Ç –∂–µ –∫—É—Ä—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–∏–ø
        if current_index > 0 and context.user_data['positions'][current_index - 1] == selected_course:
            prev_type = context.user_data['fire_safety_types'][-1]
            context.user_data['fire_safety_types'].append(prev_type)
            context.user_data['groups'].append('')

            if current_index + 1 < context.user_data['total_people']:
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
                keyboard = [
                    [f'‚úÖ –¢–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è {context.user_data["names"][current_index + 1]}'],
                    ['‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
                await update.message.reply_text(
                    f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É—Ä—Å ¬´{selected_course}¬ª ({prev_type}) –¥–ª—è {context.user_data['names'][current_index + 1]}?",
                    reply_markup=reply_markup
                )
                return POSITION
            else:
                await update.message.reply_text(
                    "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
                )
                return CERT_DATE
        else:
            keyboard = [['1. –î–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö'], ['2. –î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤']]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {context.user_data['names'][current_index]}:",
                reply_markup=reply_markup
            )
            return GROUP

    elif selected_course == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞':
        context.user_data['positions'].append(selected_course)
        context.user_data['groups'].append('')
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–µ–ª–æ–≤–µ–∫ –≤—ã–±–∏—Ä–∞–ª —ç—Ç–æ—Ç –∂–µ –∫—É—Ä—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏
        if current_index > 0 and context.user_data['positions'][current_index - 1] == selected_course:
            prev_type = context.user_data['check_types'][-1]
            context.user_data['check_types'].append(prev_type)

            if current_index + 1 < context.user_data['total_people']:
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
                keyboard = [
                    [f'‚úÖ –¢–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è {context.user_data["names"][current_index + 1]}'],
                    ['‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
                await update.message.reply_text(
                    f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É—Ä—Å ¬´{selected_course}¬ª ({prev_type} –ø—Ä–æ–≤–µ—Ä–∫–∞) –¥–ª—è {context.user_data['names'][current_index + 1]}?",
                    reply_markup=reply_markup
                )
                return POSITION
            else:
                await update.message.reply_text(
                    "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
                )
                return CERT_DATE
        else:
            keyboard = [['–ø–µ—Ä–≤–∏—á–Ω—ã–π'], ['–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π']]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {context.user_data['names'][current_index]}:",
                reply_markup=reply_markup
            )
            return CHECK_TYPE

    elif '‚úÖ –¢–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è' in text:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫—É—Ä—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ –∏ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        prev_course = context.user_data['positions'][-1]
        context.user_data['positions'].append(prev_course)

        if prev_course == '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞':
            prev_type = context.user_data['fire_safety_types'][-1]
            context.user_data['fire_safety_types'].append(prev_type)
            context.user_data['groups'].append('')
        elif prev_course == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞':
            prev_type = context.user_data['check_types'][-1]
            context.user_data['check_types'].append(prev_type)
            context.user_data['groups'].append('')
        elif prev_course == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
            prev_group = context.user_data['groups'][-1]
            context.user_data['groups'].append(prev_group)
        else:
            context.user_data['groups'].append('')

        if current_index + 1 < context.user_data['total_people']:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
            keyboard = [
                [f'‚úÖ –¢–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è {context.user_data["names"][current_index + 1]}'],
                ['‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

            additional_info = ""
            if prev_course == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
                additional_info = f" (–≥—Ä—É–ø–ø–∞ {prev_group})"
            elif prev_course == '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞':
                additional_info = f" ({prev_type})"
            elif prev_course == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞':
                additional_info = f" ({prev_type} –ø—Ä–æ–≤–µ—Ä–∫–∞)"

            await update.message.reply_text(
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É—Ä—Å ¬´{prev_course}¬ª{additional_info} –¥–ª—è {context.user_data['names'][current_index + 1]}?",
                reply_markup=reply_markup
            )
            return POSITION
        else:
            await update.message.reply_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
            )
            return CERT_DATE

    elif '‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å' in text:
        keyboard = [[pos] for pos in POSITIONS]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {context.user_data['names'][current_index]}:",
            reply_markup=reply_markup
        )
        return POSITION

    elif selected_course in course_mapping.values():
        context.user_data['positions'].append(selected_course)
        context.user_data['groups'].append('')

        if current_index + 1 < context.user_data['total_people']:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
            keyboard = [
                [f'‚úÖ –¢–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è {context.user_data["names"][current_index + 1]}'],
                ['‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É—Ä—Å ¬´{selected_course}¬ª –¥–ª—è {context.user_data['names'][current_index + 1]}?",
                reply_markup=reply_markup
            )
            return POSITION
        else:
            await update.message.reply_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
            )
            return CERT_DATE
    else:
        keyboard = [[pos] for pos in POSITIONS]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞",
            reply_markup=reply_markup
        )
        return POSITION


async def get_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    current_index = len(context.user_data.get('groups', []))
    current_name = context.user_data['names'][current_index]
    position = context.user_data['positions'][current_index]

    if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
        try:
            group = int(text)
            if 2 <= group <= 5:
                if 'groups' not in context.user_data:
                    context.user_data['groups'] = []
                context.user_data['groups'].append(group)

                # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –ª—é–¥–∏
                if current_index + 1 < context.user_data['total_people']:
                    keyboard = [[pos] for pos in POSITIONS]
                    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
                    await update.message.reply_text(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è {context.user_data['names'][current_index + 1]}:",
                        reply_markup=reply_markup
                    )
                    return POSITION
                else:
                    await update.message.reply_text(
                        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
                    )
                    return CERT_DATE
            else:
                keyboard = [['2', '3', '4', '5']]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
                await update.message.reply_text(
                    f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–æ–ø—É—Å–∫–∞ –æ—Ç 2 –¥–æ 5 –¥–ª—è {current_name}:",
                    reply_markup=reply_markup
                )
                return GROUP
        except ValueError:
            keyboard = [['2', '3', '4', '5']]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–æ–ø—É—Å–∫–∞ –æ—Ç 2 –¥–æ 5 –¥–ª—è {current_name}:",
                reply_markup=reply_markup
            )
            return GROUP

    elif position == '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞':
        if text.startswith('1.'):
            if 'fire_safety_types' not in context.user_data:
                context.user_data['fire_safety_types'] = []
            context.user_data['fire_safety_types'].append('–î–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö')
            context.user_data.setdefault('groups', []).append('')
        elif text.startswith('2.'):
            if 'fire_safety_types' not in context.user_data:
                context.user_data['fire_safety_types'] = []
            context.user_data['fire_safety_types'].append('–î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤')
            context.user_data.setdefault('groups', []).append('')
        else:
            keyboard = [['1. –î–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö'], ['2. –î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤']]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {current_name}:",
                reply_markup=reply_markup
            )
            return GROUP

        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –ª—é–¥–∏
        if current_index + 1 < context.user_data['total_people']:
            keyboard = [[pos] for pos in POSITIONS]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è {context.user_data['names'][current_index + 1]}:",
                reply_markup=reply_markup
            )
            return POSITION
        else:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
            )
            return CERT_DATE

    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        context.user_data.setdefault('groups', []).append('')
        if current_index + 1 < context.user_data['total_people']:
            keyboard = [[pos] for pos in POSITIONS]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è {context.user_data['names'][current_index + 1]}:",
                reply_markup=reply_markup
            )
            return POSITION
        else:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
            )
            return CERT_DATE


async def get_cert_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if 'total_people' not in context.user_data:
            logger.error("total_people –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return ConversationHandler.END

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'next_dates' not in context.user_data:
            context.user_data['next_dates'] = [None] * context.user_data['total_people']
        if 'cert_dates' not in context.user_data:
            context.user_data['cert_dates'] = []

        text = update.message.text.strip()
        total_people = context.user_data['total_people']

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        if not text or text in ['/start', '—Å–æ–∑–¥–∞—Ç—å', '‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', '‚ùå –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'] or any(
                pos in text for pos in POSITIONS):
            message = f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥) –¥–ª—è {total_people} {'—á–µ–ª–æ–≤–µ–∫–∞' if 2 <= total_people % 10 <= 4 and (total_people < 10 or total_people > 20) else '—á–µ–ª–æ–≤–µ–∫'}:\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ
            for idx, name in enumerate(context.user_data['names'], 1):
                position = context.user_data['positions'][idx - 1]
                message += f"{idx}) {name}\n"
                message += f"    –ö—É—Ä—Å: {position}\n"
                if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
                    group = context.user_data.get('groups', [])[idx - 1]
                    message += f"    –ì—Ä—É–ø–ø–∞: {group}\n"
                message += "\n"

            message += "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç:\n"
            example_dates = []
            for _ in range(total_people):
                example_dates.append("03.12.2024")
            message += "\n".join(example_dates)
            await update.message.reply_text(message)
            return CERT_DATE

        dates = [date.strip() for date in text.split('\n') if date.strip()]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç
        if len(dates) != total_people:
            message = f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ {total_people} {'–¥–∞—Ç—É' if total_people == 1 else '–¥–∞—Ç—ã' if 2 <= total_people % 10 <= 4 and (total_people < 10 or total_people > 20) else '–¥–∞—Ç'}\n\n"
            message += f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥) –¥–ª—è {total_people} {'—á–µ–ª–æ–≤–µ–∫–∞' if 2 <= total_people % 10 <= 4 and (total_people < 10 or total_people > 20) else '—á–µ–ª–æ–≤–µ–∫'}:\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ
            for idx, name in enumerate(context.user_data['names'], 1):
                position = context.user_data['positions'][idx - 1]
                message += f"{idx}) {name}\n"
                message += f"    –ö—É—Ä—Å: {position}\n"
                if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
                    group = context.user_data.get('groups', [])[idx - 1]
                    message += f"    –ì—Ä—É–ø–ø–∞: {group}\n"
                message += "\n"

            message += "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç:\n"
            example_dates = []
            for _ in range(total_people):
                example_dates.append("03.12.2024")
            message += "\n".join(example_dates)
            await update.message.reply_text(message)
            return CERT_DATE

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        cert_dates = []
        try:
            for date_str in dates:
                cert_date = datetime.strptime(date_str, '%d.%m.%Y')
                if cert_date > datetime.now():
                    message = "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º\n\n"
                    message += f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥) –¥–ª—è {total_people} {'—á–µ–ª–æ–≤–µ–∫–∞' if 2 <= total_people % 10 <= 4 and (total_people < 10 or total_people > 20) else '—á–µ–ª–æ–≤–µ–∫'}:\n\n"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ
                    for idx, name in enumerate(context.user_data['names'], 1):
                        position = context.user_data['positions'][idx - 1]
                        message += f"{idx}) {name}\n"
                        message += f"    –ö—É—Ä—Å: {position}\n"
                        if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
                            group = context.user_data.get('groups', [])[idx - 1]
                            message += f"    –ì—Ä—É–ø–ø–∞: {group}\n"
                        message += "\n"

                    message += "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç:\n"
                    message += "\n".join(["01.01.2024" for _ in range(total_people)])
                    await update.message.reply_text(message)
                    return CERT_DATE
                cert_dates.append(cert_date)
        except ValueError:
            message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n\n"
            message += f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥) –¥–ª—è {total_people} {'—á–µ–ª–æ–≤–µ–∫–∞' if 2 <= total_people % 10 <= 4 and (total_people < 10 or total_people > 20) else '—á–µ–ª–æ–≤–µ–∫'}:\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ
            for idx, name in enumerate(context.user_data['names'], 1):
                position = context.user_data['positions'][idx - 1]
                message += f"{idx}) {name}\n"
                message += f"    –ö—É—Ä—Å: {position}\n"
                if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
                    group = context.user_data.get('groups', [])[idx - 1]
                    message += f"    –ì—Ä—É–ø–ø–∞: {group}\n"
                message += "\n"

            message += "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç:\n"
            message += "\n".join(["01.01.2024" for _ in range(total_people)])
            await update.message.reply_text(message)
            return CERT_DATE

        context.user_data['cert_dates'] = cert_dates

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–ª—è –∫–æ–≥–æ –Ω—É–∂–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã
        needs_next_dates = []
        for i, pos in enumerate(context.user_data['positions']):
            if pos in ['–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞']:
                needs_next_dates.append(i)

        if needs_next_dates:
            message = f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥) –¥–ª—è {len(needs_next_dates)} {'—á–µ–ª–æ–≤–µ–∫–∞' if 2 <= len(needs_next_dates) % 10 <= 4 and (len(needs_next_dates) < 10 or len(needs_next_dates) > 20) else '—á–µ–ª–æ–≤–µ–∫'}:\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ
            for idx, i in enumerate(needs_next_dates, 1):
                name = context.user_data['names'][i]
                position = context.user_data['positions'][i]
                cert_date = cert_dates[i].strftime('%d.%m.%Y')

                message += f"{idx}) {name}\n"
                message += f"    –ö—É—Ä—Å: {position}\n"
                message += f"    –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {cert_date}\n"
                if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
                    group = context.user_data.get('groups', [])[i]
                    message += f"    –ì—Ä—É–ø–ø–∞: {group}\n"
                message += "\n"

            message += "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç:\n"
            example_dates = []
            for _ in range(len(needs_next_dates)):
                example_dates.append("03.12.2025")
            message += "\n".join(example_dates)

            await update.message.reply_text(message)
            context.user_data['needs_next_dates'] = needs_next_dates
            return NEXT_DATE
        else:
            context.user_data['next_dates'] = [None] * total_people
            return await show_summary(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –∑–∞–Ω–æ–≤–æ"
        )
        return CERT_DATE


async def get_next_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        needs_next_dates = context.user_data.get('needs_next_dates', [])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ needs_next_dates –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if not needs_next_dates:
            logger.error("needs_next_dates –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return ConversationHandler.END

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—ã
        if all(str(i) in text for i in range(10)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
            message = f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥) –¥–ª—è {len(needs_next_dates)} {'—á–µ–ª–æ–≤–µ–∫–∞' if 2 <= len(needs_next_dates) % 10 <= 4 and (len(needs_next_dates) < 10 or len(needs_next_dates) > 20) else '—á–µ–ª–æ–≤–µ–∫'}:\n\n"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not all(key in context.user_data for key in ['names', 'positions', 'cert_dates']):
                logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
                )
                return ConversationHandler.END

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ
            for idx, i in enumerate(needs_next_dates, 1):
                try:
                    name = context.user_data['names'][i]
                    position = context.user_data['positions'][i]
                    cert_date = context.user_data['cert_dates'][i].strftime('%d.%m.%Y')

                    message += f"{idx}) {name}\n"
                    message += f"    –ö—É—Ä—Å: {position}\n"
                    message += f"    –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {cert_date}\n"
                    if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
                        group = context.user_data.get('groups', [])[i]
                        message += f"    –ì—Ä—É–ø–ø–∞: {group}\n"
                    message += "\n"
                except IndexError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
                    )
                    return ConversationHandler.END

            message += "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç:\n"
            message += "\n".join(["03.12.2025" for _ in range(len(needs_next_dates))])

            await update.message.reply_text(message)
            return NEXT_DATE

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞—Ç
        dates = [date.strip() for date in text.split('\n') if date.strip()]

        if len(dates) != len(needs_next_dates):
            message = f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ {len(needs_next_dates)} {'–¥–∞—Ç—É' if len(needs_next_dates) == 1 else '–¥–∞—Ç—ã' if 2 <= len(needs_next_dates) % 10 <= 4 and (len(needs_next_dates) < 10 or len(needs_next_dates) > 20) else '–¥–∞—Ç'}\n\n"
            message += f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –∑–∞–Ω–æ–≤–æ:\n"
            message += "\n".join(["01.02.2024" for _ in range(len(needs_next_dates))])
            await update.message.reply_text(message)
            return NEXT_DATE

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞—Ç
        next_dates = [None] * context.user_data['total_people']
        invalid_dates = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        for i, date_str in enumerate(dates):
            try:
                next_date = datetime.strptime(date_str, '%d.%m.%Y')
                person_index = needs_next_dates[i]

                if person_index >= len(context.user_data['cert_dates']):
                    logger.error(f"–ò–Ω–¥–µ–∫—Å {person_index} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ cert_dates")
                    raise IndexError("–ò–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞")

                cert_date = context.user_data['cert_dates'][person_index]

                if next_date <= cert_date:
                    name = context.user_data['names'][person_index]
                    invalid_dates.append(
                        f"‚ùå {name}:\n"
                        f"    –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ({next_date.strftime('%d.%m.%Y')})\n"
                        f"    –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ ({cert_date.strftime('%d.%m.%Y')})"
                    )
                else:
                    next_dates[person_index] = next_date

            except (ValueError, IndexError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: {e}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –∑–∞–Ω–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥"
                )
                return NEXT_DATE

        if invalid_dates:
            message = "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\n\n"
            message += "\n\n".join(invalid_dates)
            message += "\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞—Ç—ã –∑–∞–Ω–æ–≤–æ:\n"
            message += "\n".join(["01.02.2024" for _ in range(len(needs_next_dates))])
            await update.message.reply_text(message)
            return NEXT_DATE

        context.user_data['next_dates'] = next_dates
        return await show_summary(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞—Ç: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END


async def show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    summary = await create_summary(context)
    keyboard = [['‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', '‚ùå –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n{summary}",
        reply_markup=reply_markup
    )
    return CONFIRM_DATA


async def create_summary(context) -> str:
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    summary = "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
    summary += "‚ïë    –í–´–î–ê–ß–ê –£–î–û–°–¢–û–í–ï–†–ï–ù–ò–ô    ‚ïë\n"
    summary += "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
    summary += "üìã –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:\n\n"

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    for i in range(context.user_data['total_people']):
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        summary += "‚îå" + "‚îÄ" * 40 + "‚îê\n"
        summary += f"‚îÇ üë§ –ß–µ–ª–æ–≤–µ–∫ {i + 1}" + " " * (29 - len(str(i + 1))) + "‚îÇ\n"
        summary += "‚îú" + "‚îÄ" * 40 + "‚î§\n"

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        name_line = f"‚îÇ –§–ò–û: {context.user_data['names'][i]}"
        summary += name_line + " " * (41 - len(name_line)) + "‚îÇ\n"

        workplace_line = f"‚îÇ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {context.user_data['workplaces'][i]}"
        summary += workplace_line + " " * (41 - len(workplace_line)) + "‚îÇ\n"

        job_line = f"‚îÇ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {context.user_data['job_titles'][i]}"
        summary += job_line + " " * (41 - len(job_line)) + "‚îÇ\n"

        position_line = f"‚îÇ –ö—É—Ä—Å: {context.user_data['positions'][i]}"
        summary += position_line + " " * (41 - len(position_line)) + "‚îÇ\n"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ü–¢–ú
        if context.user_data['positions'][i] == '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞':
            type_line = f"‚îÇ –¢–∏–ø: {context.user_data['fire_safety_types'][i]}"
            summary += type_line + " " * (41 - len(type_line)) + "‚îÇ\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ
        if context.user_data['positions'][i] == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
            group_line = f"‚îÇ –ì—Ä—É–ø–ø–∞: {context.user_data['groups'][i]}"
            summary += group_line + " " * (41 - len(group_line)) + "‚îÇ\n"
        elif context.user_data['positions'][i] == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞':
            check_type_line = f"‚îÇ –¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏: {context.user_data['check_types'][i]}"
            summary += check_type_line + " " * (41 - len(check_type_line)) + "‚îÇ\n"

        # –î–∞—Ç—ã
        cert_date = context.user_data['cert_dates'][i].strftime('%d.%m.%Y')
        date_line = f"‚îÇ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {cert_date}"
        summary += date_line + " " * (41 - len(date_line)) + "‚îÇ\n"

        if context.user_data['next_dates'][i]:
            next_date = context.user_data['next_dates'][i].strftime('%d.%m.%Y')
            next_date_line = f"‚îÇ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {next_date}"
            summary += next_date_line + " " * (41 - len(next_date_line)) + "‚îÇ\n"

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–∞–º–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        summary += "‚îî" + "‚îÄ" * 40 + "‚îò\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ü–µ
    summary += "–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?"

    return summary


async def confirm_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text.strip().lower()

    if '‚úÖ' in response or '–¥–∞' in response:
        await update.message.reply_text(
            "‚öôÔ∏è –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...",
            reply_markup=ReplyKeyboardRemove()
        )

        generator = CertificateGenerator()

        for i in range(context.user_data['total_people']):
            try:
                data = {
                    'fullname': context.user_data['names'][i],
                    'workplace': context.user_data['workplaces'][i],
                    'job_title': context.user_data['job_titles'][i],
                    'position': context.user_data['positions'][i],
                    'qualification_group': context.user_data.get('groups', [''])[i] or '',
                    'cert_date': context.user_data['cert_dates'][i],
                    'next_date': context.user_data.get('next_dates', [None])[i],
                    'template_type': ''
                }

                if data['position'] == '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞':
                    data['template_type'] = context.user_data.get('fire_safety_types', [])[i]
                elif data['position'] == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞':
                    data['qualification_group'] = context.user_data.get('check_types', [])[i]

                success, file_paths = generator.generate_document(data)

                if success and file_paths:
                    for file_path in file_paths:
                        try:
                            await update.message.reply_document(
                                document=open(file_path, 'rb'),
                                filename=file_path.name,
                                caption=f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {data['fullname']} —Å–æ–∑–¥–∞–Ω!"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                            await update.message.reply_text(
                                f"‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {file_path.name}"
                            )
                else:
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è {data['fullname']}"
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è {context.user_data['names'][i]}"
                )
                continue

        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ /start")
        return ConversationHandler.END

    elif '‚ùå' in response or '–Ω–µ—Ç' in response:
        await update.message.reply_text(
            "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data.clear()
        return PEOPLE_COUNT

    else:
        keyboard = [['‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã', '‚ùå –ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=reply_markup
        )
        return CONFIRM_DATA


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(MESSAGES['cancelled'], reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


async def get_check_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    current_index = len(context.user_data.get('check_types', []))
    current_name = context.user_data['names'][current_index]

    if text in ['–ø–µ—Ä–≤–∏—á–Ω—ã–π', '–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π']:
        if 'check_types' not in context.user_data:
            context.user_data['check_types'] = []
        context.user_data['check_types'].append(text)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –ª—é–¥–∏
        if current_index + 1 < context.user_data['total_people']:
            keyboard = [[pos] for pos in POSITIONS]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è {context.user_data['names'][current_index + 1]}:",
                reply_markup=reply_markup
            )
            return POSITION
        else:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
            )
            return CERT_DATE
    else:
        keyboard = [['–ø–µ—Ä–≤–∏—á–Ω—ã–π'], ['–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {current_name}:",
            reply_markup=reply_markup
        )
        return CHECK_TYPE


def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('bot.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token("7661532547:AAE8wCPk_wi1OxE8jpTpqTS7Akd6pUWtu4Q").build()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', handle_start_variations),
                MessageHandler(filters.Regex(f"^({'|'.join(start_variations)})$"), handle_start_variations)
            ],
            states={
                PEOPLE_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_people_count)],
                FULLNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
                WORKPLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_workplace)],
                JOB_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_job_title)],
                POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_position)],
                GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_group)],
                CERT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_cert_date)],
                NEXT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_next_date)],
                CONFIRM_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_data)],
                CHECK_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_check_type)]
            },
            fallbacks=[
                CommandHandler('cancel', cancel),
                CommandHandler('start', handle_start_variations),
                MessageHandler(filters.Regex(f"^({'|'.join(start_variations)})$"), handle_start_variations)
            ],
            allow_reentry=True
        )

        application.add_handler(conv_handler)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True,
            close_loop=True
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)
        sys.exit(1)


if __name__ == '__main__':
    main()