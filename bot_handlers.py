from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from datetime import datetime
import logging

from config import (PEOPLE_COUNT, FULLNAME, WORKPLACE, JOB_TITLE, POSITION,
                    GROUP, CHECK_TYPE, CERT_DATE, NEXT_DATE, CONFIRM_DATA,
                    POSITIONS, MESSAGES, COURSE_MAPPING, START_VARIATIONS)
from utils import create_summary
from certificate_generator import CertificateGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

async def handle_start_variations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.lower()

    if message_text in START_VARIATIONS:
        context.user_data.clear()
        await update.message.reply_text(
            MESSAGES['start'],
            reply_markup=ReplyKeyboardRemove()
        )
        return PEOPLE_COUNT
    return ConversationHandler.END


async def get_people_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text.strip())
        if count <= 0:
            raise ValueError()

        context.user_data.clear()
        context.user_data.update({
            'total_people': count,
            'names': [],
            'workplaces': [],
            'job_titles': [],
            'positions': [],
            'groups': [],
            'cert_dates': [],
            'next_dates': [],
            'fire_safety_types': [],
            'check_types': []
        })

        if count == 1:
            await update.message.reply_text(
                "üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è 1 —á–µ–ª–æ–≤–µ–∫–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "–ò–≤–∞–Ω–æ–≤ –ê–Ω–¥—Ä–µ–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á"
            )
        else:
            await update.message.reply_text(
                MESSAGES['enter_names'].format(count) + "\n\n"
                                                        "–ü—Ä–∏–º–µ—Ä:\n" + "\n".join(
                    [f"–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á" for _ in range(min(count, 3))])
            )
        return FULLNAME

    except ValueError:
        await update.message.reply_text(MESSAGES['invalid_count'])
        return PEOPLE_COUNT


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    total_people = context.user_data['total_people']
    names = [name.strip() for name in text.split('\n') if name.strip()]

    if len(names) != total_people:
        if total_people == 1:
            await update.message.reply_text(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –§–ò–û –¥–ª—è 1 —á–µ–ª–æ–≤–µ–∫–∞\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "–ò–≤–∞–Ω–æ–≤ –ê–Ω–¥—Ä–µ–π –ê–Ω–¥—Ä–µ–µ–≤–∏—á"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ {total_people} –§–ò–û\n"
                f"–í—ã –≤–≤–µ–ª–∏ {len(names)} –§–ò–û\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ {total_people} –§–ò–û, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n" + "\n".join([f"–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á" for _ in range(min(total_people, 3))])
            )
        return FULLNAME

    invalid_names = []
    for i, name in enumerate(names, 1):
        name_parts = name.split()
        if len(name_parts) < 2 or not all(part.replace('-', '').isalpha() for part in name_parts):
            invalid_names.append(f"{i}) {name}")

    if invalid_names:
        await update.message.reply_text(
            "‚ùå –°–ª–µ–¥—É—é—â–∏–µ –§–ò–û –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ:\n" +
            "\n".join(invalid_names) + "\n\n"
                                       "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –§–ò–û:\n"
                                       "- –ú–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞\n"
                                       "- –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å\n"
                                       "- –ö–∞–∂–¥–æ–µ –§–ò–û —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n\n"
                                       f"–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ {total_people} –§–ò–û –∑–∞–Ω–æ–≤–æ"
        )
        return FULLNAME

    context.user_data['names'] = names
    await update.message.reply_text(
        f"üè¢ –í–≤–µ–¥–∏—Ç–µ {'–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏' if total_people == 1 else '–Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è ' + str(total_people) + ' —á–µ–ª–æ–≤–µ–∫'}\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n" + "\n".join([f"–¢–û–û \"–ö–æ–º–ø–∞–Ω–∏—è {i + 1}\"" for i in range(min(total_people, 3))])
    )
    return WORKPLACE


async def get_workplace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    total_people = context.user_data['total_people']
    workplaces = [wp.strip() for wp in text.split('\n') if wp.strip()]

    if len(workplaces) != total_people:
        await update.message.reply_text(
            f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ {total_people} {'–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é' if total_people == 1 else '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'}\n"
            f"–í—ã –≤–≤–µ–ª–∏ {len(workplaces)} {'–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é' if len(workplaces) == 1 else '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ {total_people} {'–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é' if total_people == 1 else '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'}, "
            f"{'–∫–∞–∂–¥—É—é ' if total_people > 1 else ''}—Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n" + "\n".join([f"–¢–û–û \"–ö–æ–º–ø–∞–Ω–∏—è {i + 1}\"" for i in range(min(total_people, 3))])
        )
        return WORKPLACE

    context.user_data['workplaces'] = workplaces
    await update.message.reply_text(
        f"üëî –í–≤–µ–¥–∏—Ç–µ {'–¥–æ–ª–∂–Ω–æ—Å—Ç—å' if total_people == 1 else '–¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è ' + str(total_people) + ' —á–µ–ª–æ–≤–µ–∫'}:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n" + "\n".join(["–ò–Ω–∂–µ–Ω–µ—Ä-—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", "–≠–ª–µ–∫—Ç—Ä–∏–∫", "–ù–∞—á–∞–ª—å–Ω–∏–∫ —É—á–∞—Å—Ç–∫–∞"][:min(total_people, 3)])
    )
    return JOB_TITLE


async def get_job_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    total_people = context.user_data['total_people']
    job_titles = [job.strip() for job in text.split('\n') if job.strip()]

    if len(job_titles) != total_people:
        if total_people == 1:
            await update.message.reply_text(
                "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "–ò–Ω–∂–µ–Ω–µ—Ä-—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ {total_people} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π\n"
                f"–í—ã –≤–≤–µ–ª–∏ {len(job_titles)} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ {total_people} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n" + "\n".join(["–ò–Ω–∂–µ–Ω–µ—Ä-—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", "–≠–ª–µ–∫—Ç—Ä–∏–∫", "–ù–∞—á–∞–ª—å–Ω–∏–∫ —É—á–∞—Å—Ç–∫–∞"][:min(total_people, 3)])
            )
        return JOB_TITLE

    context.user_data['job_titles'] = job_titles
    keyboard = [[pos] for pos in POSITIONS]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    await update.message.reply_text(
        f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {context.user_data['names'][len(context.user_data['positions'])]}:",
        reply_markup=reply_markup
    )
    return POSITION


async def get_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if 'positions' not in context.user_data:
        context.user_data['positions'] = []
    if 'names' not in context.user_data:
        return ConversationHandler.END

    current_index = len(context.user_data['positions'])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞
    if current_index >= len(context.user_data['names']):
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return ConversationHandler.END

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    if current_index == 0 or (current_index > 0 and context.user_data['positions'][-1] != text):
        selected_course = COURSE_MAPPING.get(text, text)
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫—É—Ä—Å, —á—Ç–æ –∏ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        selected_course = context.user_data['positions'][-1]

    if selected_course == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
        context.user_data['positions'].append(selected_course)
        keyboard = [['2', '3', '4', '5']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–æ–ø—É—Å–∫–∞ –¥–ª—è {context.user_data['names'][current_index]}:",
            reply_markup=reply_markup
        )
        return GROUP

    elif selected_course == '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞':
        context.user_data['positions'].append(selected_course)
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–µ–ª–æ–≤–µ–∫ –≤—ã–±–∏—Ä–∞–ª —ç—Ç–æ—Ç –∂–µ –∫—É—Ä—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–∏–ø
        if current_index > 0 and context.user_data['positions'][current_index - 1] == selected_course:
            prev_type = context.user_data['fire_safety_types'][-1]
            context.user_data['fire_safety_types'].append(prev_type)
            context.user_data['groups'].append('')

            if current_index + 1 < context.user_data['total_people']:
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
                keyboard = [
                    [f'‚úÖ –¢–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è {context.user_data["names"][current_index + 1]}'],
                    ['‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
                await update.message.reply_text(
                    f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É—Ä—Å ¬´{selected_course}¬ª ({prev_type}) –¥–ª—è {context.user_data['names'][current_index + 1]}?",
                    reply_markup=reply_markup
                )
                return POSITION
            else:
                await update.message.reply_text(
                    "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
                )
                return CERT_DATE
        else:
            keyboard = [['1. –î–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö'], ['2. –î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤']]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {context.user_data['names'][current_index]}:",
                reply_markup=reply_markup
            )
            return GROUP

    elif selected_course == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞':
        context.user_data['positions'].append(selected_course)
        context.user_data['groups'].append('')
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–µ–ª–æ–≤–µ–∫ –≤—ã–±–∏—Ä–∞–ª —ç—Ç–æ—Ç –∂–µ –∫—É—Ä—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏
        if current_index > 0 and context.user_data['positions'][current_index - 1] == selected_course:
            prev_type = context.user_data['check_types'][-1]
            context.user_data['check_types'].append(prev_type)

            if current_index + 1 < context.user_data['total_people']:
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
                keyboard = [
                    [f'‚úÖ –¢–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è {context.user_data["names"][current_index + 1]}'],
                    ['‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å']
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
                await update.message.reply_text(
                    f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É—Ä—Å ¬´{selected_course}¬ª ({prev_type} –ø—Ä–æ–≤–µ—Ä–∫–∞) –¥–ª—è {context.user_data['names'][current_index + 1]}?",
                    reply_markup=reply_markup
                )
                return POSITION
            else:
                await update.message.reply_text(
                    "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
                )
                return CERT_DATE
        else:
            keyboard = [['–ø–µ—Ä–≤–∏—á–Ω—ã–π'], ['–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π']]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {context.user_data['names'][current_index]}:",
                reply_markup=reply_markup
            )
            return CHECK_TYPE

    elif '‚úÖ –¢–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è' in text:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫—É—Ä—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ –∏ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        prev_course = context.user_data['positions'][-1]
        context.user_data['positions'].append(prev_course)

        if prev_course == '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞':
            prev_type = context.user_data['fire_safety_types'][-1]
            context.user_data['fire_safety_types'].append(prev_type)
            context.user_data['groups'].append('')
        elif prev_course == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞':
            prev_type = context.user_data['check_types'][-1]
            context.user_data['check_types'].append(prev_type)
            context.user_data['groups'].append('')
        elif prev_course == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
            prev_group = context.user_data['groups'][-1]
            context.user_data['groups'].append(prev_group)
        else:
            context.user_data['groups'].append('')

        if current_index + 1 < context.user_data['total_people']:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
            keyboard = [
                [f'‚úÖ –¢–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è {context.user_data["names"][current_index + 1]}'],
                ['‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

            additional_info = ""
            if prev_course == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
                additional_info = f" (–≥—Ä—É–ø–ø–∞ {prev_group})"
            elif prev_course == '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞':
                additional_info = f" ({prev_type})"
            elif prev_course == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞':
                additional_info = f" ({prev_type} –ø—Ä–æ–≤–µ—Ä–∫–∞)"

            await update.message.reply_text(
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É—Ä—Å ¬´{prev_course}¬ª{additional_info} –¥–ª—è {context.user_data['names'][current_index + 1]}?",
                reply_markup=reply_markup
            )
            return POSITION
        else:
            await update.message.reply_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
            )
            return CERT_DATE

    elif '‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å' in text:
        keyboard = [[pos] for pos in POSITIONS]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {context.user_data['names'][current_index]}:",
            reply_markup=reply_markup
        )
        return POSITION

    elif selected_course in COURSE_MAPPING.values():
        context.user_data['positions'].append(selected_course)
        context.user_data['groups'].append('')

        if current_index + 1 < context.user_data['total_people']:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
            keyboard = [
                [f'‚úÖ –¢–æ—Ç –∂–µ –∫—É—Ä—Å –¥–ª—è {context.user_data["names"][current_index + 1]}'],
                ['‚ùå –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É—Ä—Å ¬´{selected_course}¬ª –¥–ª—è {context.user_data['names'][current_index + 1]}?",
                reply_markup=reply_markup
            )
            return POSITION
        else:
            await update.message.reply_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
            )
            return CERT_DATE
    else:
        keyboard = [[pos] for pos in POSITIONS]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞",
            reply_markup=reply_markup
        )
        return POSITION


async def get_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    current_index = len(context.user_data.get('groups', []))
    current_name = context.user_data['names'][current_index]
    position = context.user_data['positions'][current_index]

    if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
        try:
            group = int(text)
            if 2 <= group <= 5:
                if 'groups' not in context.user_data:
                    context.user_data['groups'] = []
                context.user_data['groups'].append(group)

                # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –ª—é–¥–∏
                if current_index + 1 < context.user_data['total_people']:
                    keyboard = [[pos] for pos in POSITIONS]
                    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
                    await update.message.reply_text(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è {context.user_data['names'][current_index + 1]}:",
                        reply_markup=reply_markup
                    )
                    return POSITION
                else:
                    await update.message.reply_text(
                        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
                    )
                    return CERT_DATE
            else:
                keyboard = [['2', '3', '4', '5']]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
                await update.message.reply_text(
                    f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–æ–ø—É—Å–∫–∞ –æ—Ç 2 –¥–æ 5 –¥–ª—è {current_name}:",
                    reply_markup=reply_markup
                )
                return GROUP
        except ValueError:
            keyboard = [['2', '3', '4', '5']]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–æ–ø—É—Å–∫–∞ –æ—Ç 2 –¥–æ 5 –¥–ª—è {current_name}:",
                reply_markup=reply_markup
            )
            return GROUP

    elif position == '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞':
        if text.startswith('1.'):
            if 'fire_safety_types' not in context.user_data:
                context.user_data['fire_safety_types'] = []
            context.user_data['fire_safety_types'].append('–î–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö')
            context.user_data.setdefault('groups', []).append('')
        elif text.startswith('2.'):
            if 'fire_safety_types' not in context.user_data:
                context.user_data['fire_safety_types'] = []
            context.user_data['fire_safety_types'].append('–î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤')
            context.user_data.setdefault('groups', []).append('')
        else:
            keyboard = [['1. –î–ª—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö'], ['2. –î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤']]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {current_name}:",
                reply_markup=reply_markup
            )
            return GROUP

        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –ª—é–¥–∏
        if current_index + 1 < context.user_data['total_people']:
            keyboard = [[pos] for pos in POSITIONS]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è {context.user_data['names'][current_index + 1]}:",
                reply_markup=reply_markup
            )
            return POSITION
        else:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
            )
            return CERT_DATE

    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        context.user_data.setdefault('groups', []).append('')
        if current_index + 1 < context.user_data['total_people']:
            keyboard = [[pos] for pos in POSITIONS]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è {context.user_data['names'][current_index + 1]}:",
                reply_markup=reply_markup
            )
            return POSITION
        else:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
            )
            return CERT_DATE 