#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import pymupdf
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime
import subprocess
import platform
from image_certificate_generator import ImageCertificateGenerator

def update_coordinates_for_template():
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –∏ —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
    """
    # –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É
    template_path = "–ë–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç—å_–∏_–æ—Ö—Ä–∞–Ω–∞_—Ç—Ä—É–¥–∞_–∫–æ—Ä–æ—á–∫–∞_1.pdf"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(template_path):
        print(f"–û–®–ò–ë–ö–ê: –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ {template_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    template_name = os.path.basename(template_path).split('.')[0].upper().replace(' ', '_')
    print(f"–ò–º—è —à–∞–±–ª–æ–Ω–∞: {template_name}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —à–∞–±–ª–æ–Ω–∞
    # üëá –ó–î–ï–°–¨ –ù–ï–û–ë–•–û–î–ò–ú–û –í–í–ï–°–¢–ò –ü–†–ê–í–ò–õ–¨–ù–´–ï –ö–û–û–†–î–ò–ù–ê–¢–´ –ü–û–°–õ–ï –ê–ù–ê–õ–ò–ó–ê –®–ê–ë–õ–û–ù–ê üëá
    coordinates = {
        template_name: {
            'LEFT': {
                # –û–±–Ω–æ–≤–∏—Ç–µ —ç—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É —à–∞–±–ª–æ–Ω—É
                'protocol_number': (440, 440),  # –ù–æ–º–µ—Ä —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è
                'workplace': (320, 280),        # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è 
                'fullname': (320, 240),         # –§–ò–û
                'job_title': (320, 320),        # –î–æ–ª–∂–Ω–æ—Å—Ç—å
                'cert_day': (273, 345),         # –î–µ–Ω—å –≤—ã–¥–∞—á–∏
                'cert_month': (295, 345),       # –ú–µ—Å—è—Ü –≤—ã–¥–∞—á–∏
                'cert_year': (339, 345)         # –ì–æ–¥ –≤—ã–¥–∞—á–∏
            },
            'RIGHT': {
                'cert_date': (733, 377),       # –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
                'reason': (803, 377),          # –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 
                'mark': (947, 377),            # –û—Ü–µ–Ω–∫–∞
                'next_date': (1085, 377)       # –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            }
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ JSON
    with open(f"coordinates_{template_name}.json", 'w', encoding='utf-8') as f:
        json.dump(coordinates, f, ensure_ascii=False, indent=4)
    print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: coordinates_{template_name}.json")
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    generator = ImageCertificateGenerator()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ
    for template, sections in coordinates.items():
        if template not in generator.COORDINATES:
            generator.COORDINATES[template] = {}
        
        for section, fields in sections.items():
            if section not in generator.COORDINATES[template]:
                generator.COORDINATES[template][section] = {}
            
            for field, coords in fields.items():
                generator.COORDINATES[template][section][field] = coords
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'protocol_number': '123-456',
        'workplace': '–¢–û–û "–≠–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å"',
        'fullname': '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
        'job_title': '–ò–Ω–∂–µ–Ω–µ—Ä-—ç–ª–µ–∫—Ç—Ä–∏–∫',
        'cert_date': '12.04.2025',
        'next_date': '12.04.2026',
        'group': ''  # –ü—É—Å—Ç–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –ë–∏–û–¢
    }
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–æ–π
    output_debug_path = generator._create_electrobez_korotchka(
        template_path=template_path,
        data=test_data,
        output_filename=f"debug_{template_name}",
        debug_mode=True,
        grid_density=20
    )
    
    print(f"–°–æ–∑–¥–∞–Ω –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å —Å–µ—Ç–∫–æ–π: {output_debug_path}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    output_path = generator._create_electrobez_korotchka(
        template_path=template_path,
        data=test_data,
        output_filename=f"final_{template_name}",
        debug_mode=False,
        grid_density=0
    )
    
    print(f"–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {output_path}")
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        if platform.system() == "Windows":
            os.startfile(output_path)
        elif platform.system() == "Darwin":  # macOS
            subprocess.call(["open", output_path])
        else:  # Linux
            subprocess.call(["xdg-open", output_path])
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")
    
    print("\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print("1. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª debug_{}.jpg —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–æ–π".format(template_name))
    print("2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–∫—Ä–∏–ø—Ç–µ (—Å–µ–∫—Ü–∏—è coordinates)")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
    print("4. –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ —à–∞–≥–∏ 2-3, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    print("5. –ì–æ—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ —Ñ–∞–π–ª image_certificate_generator.py")

if __name__ == "__main__":
    update_coordinates_for_template() 