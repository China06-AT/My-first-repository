from datetime import datetime, timedelta
from image_certificate_generator import ImageCertificateGenerator
import os
import argparse
import platform
import subprocess

def main():
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–∏')
    
    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    parser.add_argument('--no-debug', action='store_true', help='–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–æ–π')
    parser.add_argument('--grid-density', type=int, default=150, help='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–∏ (–±–æ–ª—å—à–µ = —Ä–µ–∂–µ –ª–∏–Ω–∏–∏)')
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    parser.add_argument('--grid-opacity', type=int, default=80, help='–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å–µ—Ç–∫–∏, –æ—Ç 0 –¥–æ 255')
    parser.add_argument('--highlight-color', choices=['green', 'red', 'blue', 'orange'], default='green', 
                      help='–¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫')
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    parser.add_argument('--show-axes-only', action='store_true', help='–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–∏ X –∏ Y, –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –ª–∏–Ω–∏–π')
    parser.add_argument('--radius', type=int, default=6, help='–†–∞–¥–∏—É—Å –º–∞—Ä–∫–µ—Ä–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫')
    
    args = parser.parse_args()
    
    # –í—ã–≤–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–∏:")
    print(f"  - –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–í—ã–∫–ª—é—á–µ–Ω' if args.no_debug else '–í–∫–ª—é—á–µ–Ω'}")
    print(f"  - –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–µ—Ç–∫–∏: {args.grid_density}")
    print(f"  - –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å–µ—Ç–∫–∏: {args.grid_opacity}")
    print(f"  - –¶–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è: {args.highlight_color}")
    print(f"  - –¢–æ–ª—å–∫–æ –æ—Å–∏: {'–î–∞' if args.show_axes_only else '–ù–µ—Ç'}")
    print(f"  - –†–∞–¥–∏—É—Å –º–∞—Ä–∫–µ—Ä–æ–≤: {args.radius}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
    color_map = {
        'green': (0, 150, 0, 180),
        'red': (180, 0, 0, 180),
        'blue': (0, 0, 180, 180),
        'orange': (200, 100, 0, 180)
    }
    
    # –ì–æ—Ç–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    # –í –±—É–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å ImageCertificateGenerator –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'fullname': '–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á',
        'workplace': '–¢–û–û "–ö–æ–º–ø–∞–Ω–∏—è"',
        'job_title': '–ò–Ω–∂–µ–Ω–µ—Ä-—ç–ª–µ–∫—Ç—Ä–∏–∫',
        'position': '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        'qualification_group': '4',
        'cert_date': datetime.now() - timedelta(days=5),
        'next_date': datetime.now() + timedelta(days=365)
    }

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    generator = ImageCertificateGenerator()
    
    print("\n–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    result, files = generator.generate_document(
        test_data,
        debug_mode=not args.no_debug,
        grid_density=args.grid_density
    )
    
    if result and files:
        print(f"\n‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n")
        output_file = files[0]
        print(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {output_file}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
        try:
            print("\n–û—Ç–∫—Ä—ã–≤–∞—é —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...")
            if platform.system() == 'Windows':
                os.startfile(output_file)
            elif platform.system() == 'Darwin':  # macOS
                subprocess.call(['open', output_file])
            else:  # Linux
                subprocess.call(['xdg-open', output_file])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")
            print(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é: {output_file}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
        
    print("\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("  - –ë–æ–ª–µ–µ –ø–ª–æ—Ç–Ω–∞—è —Å–µ—Ç–∫–∞: python custom_grid_settings.py --grid-density 100")
    print("  - –†–µ–¥–∫–∞—è —Å–µ—Ç–∫–∞ —Å –∫—Ä–∞—Å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏: python custom_grid_settings.py --grid-density 200 --highlight-color red")
    print("  - –ë–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–∏: python custom_grid_settings.py --no-debug")

if __name__ == "__main__":
    main() 