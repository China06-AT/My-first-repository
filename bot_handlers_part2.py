from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from datetime import datetime
import logging

from config import (PEOPLE_COUNT, FULLNAME, WORKPLACE, JOB_TITLE, POSITION,
                    GROUP, CHECK_TYPE, CERT_DATE, NEXT_DATE, CONFIRM_DATA,
                    POSITIONS, MESSAGES)
from utils import create_summary
from cert_manager import CertificateManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

async def get_check_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    current_index = len(context.user_data.get('check_types', []))
    current_name = context.user_data['names'][current_index]

    if text in ['–ø–µ—Ä–≤–∏—á–Ω—ã–π', '–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π']:
        if 'check_types' not in context.user_data:
            context.user_data['check_types'] = []
        context.user_data['check_types'].append(text)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –ª—é–¥–∏
        if current_index + 1 < context.user_data['total_people']:
            keyboard = [[pos] for pos in POSITIONS]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è {context.user_data['names'][current_index + 1]}:",
                reply_markup=reply_markup
            )
            return POSITION
        else:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥):\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024"
            )
            return CERT_DATE
    else:
        keyboard = [['–ø–µ—Ä–≤–∏—á–Ω—ã–π'], ['–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {current_name}:",
            reply_markup=reply_markup
        )
        return CHECK_TYPE


async def get_cert_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if 'total_people' not in context.user_data:
            logger.error("total_people –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return ConversationHandler.END

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'next_dates' not in context.user_data:
            context.user_data['next_dates'] = [None] * context.user_data['total_people']
        if 'cert_dates' not in context.user_data:
            context.user_data['cert_dates'] = []

        text = update.message.text.strip()
        total_people = context.user_data['total_people']

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        if not text or text in ['/start', '—Å–æ–∑–¥–∞—Ç—å', '‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', '‚ùå –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'] or any(
                pos in text for pos in POSITIONS):
            message = f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥) –¥–ª—è {total_people} {'—á–µ–ª–æ–≤–µ–∫–∞' if 2 <= total_people % 10 <= 4 and (total_people < 10 or total_people > 20) else '—á–µ–ª–æ–≤–µ–∫'}:\n\n"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if 'names' not in context.user_data or 'positions' not in context.user_data:
                logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ: names –∏–ª–∏ positions")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
                )
                return ConversationHandler.END
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if len(context.user_data['names']) < total_people or len(context.user_data['positions']) < total_people:
                logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: names={len(context.user_data['names'])}, positions={len(context.user_data['positions'])}, total_people={total_people}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
                )
                return ConversationHandler.END

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ
            for idx, name in enumerate(context.user_data['names'], 1):
                if idx > total_people:
                    break
                    
                try:
                    position = context.user_data['positions'][idx - 1]
                    message += f"{idx}) {name}\n"
                    message += f"    –ö—É—Ä—Å: {position}\n"
                    if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' and 'groups' in context.user_data and idx - 1 < len(context.user_data['groups']):
                        group = context.user_data['groups'][idx - 1]
                        message += f"    –ì—Ä—É–ø–ø–∞: {group}\n"
                    message += "\n"
                except IndexError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏

            message += "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç:\n"
            example_dates = []
            for _ in range(total_people):
                example_dates.append("03.12.2024")
            message += "\n".join(example_dates)
            await update.message.reply_text(message)
            return CERT_DATE

        dates = [date.strip() for date in text.split('\n') if date.strip()]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç
        if len(dates) != total_people:
            message = f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ {total_people} {'–¥–∞—Ç—É' if total_people == 1 else '–¥–∞—Ç—ã' if 2 <= total_people % 10 <= 4 and (total_people < 10 or total_people > 20) else '–¥–∞—Ç'}\n\n"
            message += f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥) –¥–ª—è {total_people} {'—á–µ–ª–æ–≤–µ–∫–∞' if 2 <= total_people % 10 <= 4 and (total_people < 10 or total_people > 20) else '—á–µ–ª–æ–≤–µ–∫'}:\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ
            for idx, name in enumerate(context.user_data['names'], 1):
                if idx > total_people:
                    break
                
                try:
                    position = context.user_data['positions'][idx - 1]
                    message += f"{idx}) {name}\n"
                    message += f"    –ö—É—Ä—Å: {position}\n"
                    if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' and 'groups' in context.user_data and idx - 1 < len(context.user_data['groups']):
                        group = context.user_data['groups'][idx - 1]
                        message += f"    –ì—Ä—É–ø–ø–∞: {group}\n"
                    message += "\n"
                except IndexError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    continue

            message += "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç:\n"
            example_dates = []
            for _ in range(total_people):
                example_dates.append("03.12.2024")
            message += "\n".join(example_dates)
            await update.message.reply_text(message)
            return CERT_DATE

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        cert_dates = []
        try:
            for i, date_str in enumerate(dates):
                try:
                    cert_date = datetime.strptime(date_str, '%d.%m.%Y')
                    if cert_date > datetime.now():
                        message = "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º\n\n"
                        message += f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥) –¥–ª—è {total_people} {'—á–µ–ª–æ–≤–µ–∫–∞' if 2 <= total_people % 10 <= 4 and (total_people < 10 or total_people > 20) else '—á–µ–ª–æ–≤–µ–∫'}:\n\n"

                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ
                        for idx, name in enumerate(context.user_data['names'], 1):
                            if idx > total_people:
                                break
                                
                            try:
                                position = context.user_data['positions'][idx - 1]
                                message += f"{idx}) {name}\n"
                                message += f"    –ö—É—Ä—Å: {position}\n"
                                if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' and 'groups' in context.user_data and idx - 1 < len(context.user_data['groups']):
                                    group = context.user_data['groups'][idx - 1]
                                    message += f"    –ì—Ä—É–ø–ø–∞: {group}\n"
                                message += "\n"
                            except IndexError:
                                continue

                        message += "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç:\n"
                        message += "\n".join(["01.01.2024" for _ in range(total_people)])
                        await update.message.reply_text(message)
                        return CERT_DATE
                    cert_dates.append(cert_date)
                except ValueError as e:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã #{i+1} '{date_str}': {str(e)}")
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{date_str}'")
        except ValueError as e:
            message = f"‚ùå {str(e)}\n\n"
            message += f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ (–¥–¥.–º–º.–≥–≥–≥–≥) –¥–ª—è {total_people} {'—á–µ–ª–æ–≤–µ–∫–∞' if 2 <= total_people % 10 <= 4 and (total_people < 10 or total_people > 20) else '—á–µ–ª–æ–≤–µ–∫'}:\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ
            for idx, name in enumerate(context.user_data['names'], 1):
                if idx > total_people:
                    break
                    
                try:
                    position = context.user_data['positions'][idx - 1]
                    message += f"{idx}) {name}\n"
                    message += f"    –ö—É—Ä—Å: {position}\n"
                    if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' and 'groups' in context.user_data and idx - 1 < len(context.user_data['groups']):
                        group = context.user_data['groups'][idx - 1]
                        message += f"    –ì—Ä—É–ø–ø–∞: {group}\n"
                    message += "\n"
                except IndexError:
                    continue

            message += "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç:\n"
            message += "\n".join(["01.01.2024" for _ in range(total_people)])
            await update.message.reply_text(message)
            return CERT_DATE

        context.user_data['cert_dates'] = cert_dates

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–ª—è –∫–æ–≥–æ –Ω—É–∂–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã
        needs_next_dates = []
        for i, pos in enumerate(context.user_data['positions']):
            if i < len(cert_dates) and pos in ['–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞']:
                needs_next_dates.append(i)

        if needs_next_dates:
            message = f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥) –¥–ª—è {len(needs_next_dates)} {'—á–µ–ª–æ–≤–µ–∫–∞' if 2 <= len(needs_next_dates) % 10 <= 4 and (len(needs_next_dates) < 10 or len(needs_next_dates) > 20) else '—á–µ–ª–æ–≤–µ–∫'}:\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ
            for idx, i in enumerate(needs_next_dates, 1):
                try:
                    if i >= len(context.user_data['names']) or i >= len(context.user_data['positions']) or i >= len(cert_dates):
                        logger.error(f"–ò–Ω–¥–µ–∫—Å {i} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ names, positions –∏–ª–∏ cert_dates")
                        continue
                        
                    name = context.user_data['names'][i]
                    position = context.user_data['positions'][i]
                    cert_date = cert_dates[i].strftime('%d.%m.%Y')

                    message += f"{idx}) {name}\n"
                    message += f"    –ö—É—Ä—Å: {position}\n"
                    message += f"    –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {cert_date}\n"
                    if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' and 'groups' in context.user_data and i < len(context.user_data['groups']):
                        group = context.user_data['groups'][i]
                        message += f"    –ì—Ä—É–ø–ø–∞: {group}\n"
                    message += "\n"
                except IndexError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞—Ç–∞—Ö: {e}")
                    continue
                except Exception as e:
                    logger.error(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞—Ç–∞—Ö: {e}")
                    continue

            message += "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç:\n"
            example_dates = []
            for _ in range(len(needs_next_dates)):
                example_dates.append("03.12.2025")
            message += "\n".join(example_dates)

            await update.message.reply_text(message)
            context.user_data['needs_next_dates'] = needs_next_dates
            return NEXT_DATE
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Ö
            context.user_data['next_dates'] = [None] * total_people
            return await show_summary(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç: {str(e)}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –∑–∞–Ω–æ–≤–æ"
        )
        return CERT_DATE


async def get_next_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.strip()
        needs_next_dates = context.user_data.get('needs_next_dates', [])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ needs_next_dates –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if not needs_next_dates:
            logger.error("needs_next_dates –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return ConversationHandler.END

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—ã
        if all(str(i) in text for i in range(10)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–∏—Ñ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
            message = f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥) –¥–ª—è {len(needs_next_dates)} {'—á–µ–ª–æ–≤–µ–∫–∞' if 2 <= len(needs_next_dates) % 10 <= 4 and (len(needs_next_dates) < 10 or len(needs_next_dates) > 20) else '—á–µ–ª–æ–≤–µ–∫'}:\n\n"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            required_keys = ['names', 'positions', 'cert_dates']
            if not all(key in context.user_data for key in required_keys):
                missing_keys = [key for key in required_keys if key not in context.user_data]
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {missing_keys}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
                )
                return ConversationHandler.END
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–∞—Ö
            for key in required_keys:
                if len(context.user_data.get(key, [])) < max(needs_next_dates) + 1:
                    logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ {key}: {len(context.user_data.get(key, []))} < {max(needs_next_dates) + 1}")
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
                    )
                    return ConversationHandler.END

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ
            for idx, i in enumerate(needs_next_dates, 1):
                try:
                    if i >= len(context.user_data['names']) or i >= len(context.user_data['positions']) or i >= len(context.user_data['cert_dates']):
                        logger.error(f"–ò–Ω–¥–µ–∫—Å {i} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–æ–≤")
                        continue
                        
                    name = context.user_data['names'][i]
                    position = context.user_data['positions'][i]
                    cert_date = context.user_data['cert_dates'][i].strftime('%d.%m.%Y')

                    message += f"{idx}) {name}\n"
                    message += f"    –ö—É—Ä—Å: {position}\n"
                    message += f"    –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {cert_date}\n"
                    if position == '–ö—É—Ä—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' and 'groups' in context.user_data and i < len(context.user_data['groups']):
                        group = context.user_data['groups'][i]
                        message += f"    –ì—Ä—É–ø–ø–∞: {group}\n"
                    message += "\n"
                except IndexError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏ –≤–º–µ—Å—Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                except Exception as e:
                    logger.error(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    continue

            message += "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–∞—Ç:\n"
            message += "\n".join(["03.12.2025" for _ in range(len(needs_next_dates))])

            await update.message.reply_text(message)
            return NEXT_DATE

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞—Ç
        dates = [date.strip() for date in text.split('\n') if date.strip()]

        if len(dates) != len(needs_next_dates):
            message = f"‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ {len(needs_next_dates)} {'–¥–∞—Ç—É' if len(needs_next_dates) == 1 else '–¥–∞—Ç—ã' if 2 <= len(needs_next_dates) % 10 <= 4 and (len(needs_next_dates) < 10 or len(needs_next_dates) > 20) else '–¥–∞—Ç'}\n\n"
            message += f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –∑–∞–Ω–æ–≤–æ:\n"
            message += "\n".join(["01.02.2024" for _ in range(len(needs_next_dates))])
            await update.message.reply_text(message)
            return NEXT_DATE

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞—Ç
        next_dates = [None] * context.user_data['total_people']
        invalid_dates = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        for i, date_str in enumerate(dates):
            try:
                if i >= len(needs_next_dates):
                    logger.error(f"–ò–Ω–¥–µ–∫—Å {i} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ needs_next_dates –¥–ª–∏–Ω–æ–π {len(needs_next_dates)}")
                    continue
                    
                next_date = datetime.strptime(date_str, '%d.%m.%Y')
                person_index = needs_next_dates[i]

                if 'cert_dates' not in context.user_data or not context.user_data['cert_dates']:
                    logger.error("–°–ø–∏—Å–æ–∫ cert_dates –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç")
                    raise ValueError("–°–ø–∏—Å–æ–∫ cert_dates –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç")
                
                if person_index >= len(context.user_data['cert_dates']):
                    logger.error(f"–ò–Ω–¥–µ–∫—Å {person_index} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ cert_dates –¥–ª–∏–Ω–æ–π {len(context.user_data['cert_dates'])}")
                    raise IndexError(f"–ò–Ω–¥–µ–∫—Å {person_index} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ cert_dates")

                cert_date = context.user_data['cert_dates'][person_index]
                
                if cert_date is None:
                    logger.error(f"cert_date –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ {person_index} —Ä–∞–≤–µ–Ω None")
                    raise ValueError(f"cert_date –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ {person_index} —Ä–∞–≤–µ–Ω None")

                if next_date <= cert_date:
                    if person_index >= len(context.user_data['names']):
                        logger.error(f"–ò–Ω–¥–µ–∫—Å {person_index} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ names")
                        raise IndexError(f"–ò–Ω–¥–µ–∫—Å {person_index} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞ names")
                        
                    name = context.user_data['names'][person_index]
                    invalid_dates.append(
                        f"‚ùå {name}:\n"
                        f"    –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ({next_date.strftime('%d.%m.%Y')})\n"
                        f"    –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ ({cert_date.strftime('%d.%m.%Y')})"
                    )
                else:
                    next_dates[person_index] = next_date

            except (ValueError, IndexError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã ({i}, {date_str}): {str(e)}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –∑–∞–Ω–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥"
                )
                return NEXT_DATE

        if invalid_dates:
            message = "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\n\n"
            message += "\n\n".join(invalid_dates)
            message += "\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞—Ç—ã –∑–∞–Ω–æ–≤–æ:\n"
            message += "\n".join(["01.02.2024" for _ in range(len(needs_next_dates))])
            await update.message.reply_text(message)
            return NEXT_DATE

        context.user_data['next_dates'] = next_dates
        return await show_summary(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞—Ç: {str(e)}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END


async def show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    summary = await create_summary(context)
    keyboard = [['‚úÖ –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã', '‚ùå –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n{summary}",
        reply_markup=reply_markup
    )
    return CONFIRM_DATA


async def confirm_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text.strip()

    if '‚úÖ' in response or '–¥–∞' in response.lower():
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        manager = CertificateManager()
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        for i in range(context.user_data['total_people']):
            try:
                data = {
                    'fullname': context.user_data['names'][i],
                    'workplace': context.user_data['workplaces'][i],
                    'job_title': context.user_data['job_titles'][i],
                    'position': context.user_data['positions'][i],
                    'qualification_group': context.user_data.get('groups', [None] * context.user_data['total_people'])[i],
                    'cert_date': context.user_data.get('cert_dates', [None])[i],
                    'next_date': context.user_data.get('next_dates', [None])[i],
                    'template_type': ''
                }

                if data['position'] == '–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ –æ–±—ä–µ–º–µ –ø–æ–∂–∞—Ä–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞':
                    data['template_type'] = context.user_data.get('fire_safety_types', [])[i]
                elif data['position'] == '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞':
                    data['qualification_group'] = context.user_data.get('check_types', [])[i]

                success, file_paths = manager.generate_documents(data)

                if success and file_paths:
                    for file_path in file_paths:
                        try:
                            await update.message.reply_document(
                                document=open(file_path, 'rb'),
                                filename=file_path.name,
                                caption=f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {data['fullname']} —Å–æ–∑–¥–∞–Ω!"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                            await update.message.reply_text(
                                f"‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {file_path.name}"
                            )
                else:
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è {data['fullname']}"
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è {context.user_data['names'][i]}"
                )
                continue

        await update.message.reply_text(MESSAGES['success'])
        return ConversationHandler.END

    elif '‚ùå' in response or '–Ω–µ—Ç' in response:
        await update.message.reply_text(
            "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data.clear()
        return PEOPLE_COUNT

    else:
        keyboard = [['‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã', '‚ùå –ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=reply_markup
        )
        return CONFIRM_DATA


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(MESSAGES['cancelled'], reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END 